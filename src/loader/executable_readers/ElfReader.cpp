// Copyright 2008 Dolphin Emulator Project
// Licensed under GPLv2+
// Refer to the license.txt file included.

#include "loader/executable_readers/ElfReader.h"

#include <cstring>
#include <string>
#include <utility>

#include "common/CommonTypes.h"
#include "common/File.h"
#include "common/FileUtil.h"

ElfReader::ElfReader(const std::vector<u8>& buffer) : BootExecutableReader(buffer)
{
  Initialize(m_bytes.data());
}

ElfReader::ElfReader(File::IOFile file) : BootExecutableReader(std::move(file))
{
  Initialize(m_bytes.data());
}

ElfReader::ElfReader(const std::string& filename) : BootExecutableReader(filename)
{
  Initialize(m_bytes.data());
}

ElfReader::~ElfReader() = default;

void ElfReader::Initialize(u8* ptr)
{
  base = (char*)ptr;
  base32 = (u32*)ptr;
  header = (Elf32_Ehdr*)ptr;

  segments = (Elf32_Phdr*)(base + header->e_phoff);
  sections = (Elf32_Shdr*)(base + header->e_shoff);

  entryPoint = header->e_entry;

  bRelocate = (header->e_type != ET_EXEC);
}

const char* ElfReader::GetSectionName(int section) const
{
  if (sections[section].sh_type == SHT_NULL)
    return nullptr;

  int nameOffset = sections[section].sh_name;
  char* ptr = (char*)GetSectionDataPtr(header->e_shstrndx);

  if (ptr)
    return ptr + nameOffset;
  else
    return nullptr;
}

// This is just a simple elf loader, good enough to load elfs generated by devkitPPC
bool ElfReader::LoadIntoMemory() const
{
  if (bRelocate)
  {
    return false;
  }

  // Copy segments into ram.
  for (int i = 0; i < header->e_phnum; i++)
  {
    Elf32_Phdr* p = segments + i;

    if (p->p_type == PT_LOAD)
    {
      u32 writeAddr = p->p_vaddr;
      const u8* src = GetSegmentPtr(i);
      u32 srcSize = p->p_filesz;
      u32 dstSize = p->p_memsz;

      std::memcpy(reinterpret_cast<void*>(writeAddr), src, srcSize);
      // zero out bss
      if (srcSize < dstSize)
        std::memset(reinterpret_cast<void*>(writeAddr + srcSize), 0, dstSize - srcSize);
    }
  }

  return true;
}

SectionID ElfReader::GetSectionByName(const char* name, int firstSection) const
{
  for (int i = firstSection; i < header->e_shnum; i++)
  {
    const char* secname = GetSectionName(i);

    if (secname != nullptr && strcmp(name, secname) == 0)
      return i;
  }
  return -1;
}
